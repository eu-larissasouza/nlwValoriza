--Overview da trilha de NodeJS-------------
Criaremos uma aplicação BackEnd e vamos entender como podemos criar uma aplicação utilizando os fundamentos do Node.

--Aplicação-----------------------------------------------------
Projeto NLW Valoriza- feito durante essa semana :

-Cadastro de usuários
-Cadastro de Tags(elogios possíveis)
-Cadastro de elogios

-Autentificação de usuário

-Listagem de usuários
-Listagem de tags
-Listagem de elogios por usuário

--Ambiente---------------------------------------------------------

Insomnia: ferramenta que quando criarmos a aplicação vamos precisar acessar as requisições e usamos o Insomnia como uma aplicação que vai ser nosso "cliente"

Beekeeper Studio: Gerenciador de Banco de Dados, com a acessoa a tudo que for inserido em nossa máquina.

--NodeJS---------------------------------------------------

-> O que é NodeJS 

Primeira versão em 2009 criada pelo pesquisado Ryan Dahl

Java Script é uma linguagem que conseguimos fazer funções sem que aconteça um bloqueio de requisições, que acontecem assincronamente.
Junto com o Java Script e o V8, o pesquisador criou o Node.

-> Funcionamento do Node

No Node temos um Event Loop que vai receber nossas requisições, responsável por capturar toda requisição que entra em nossa aplicação.

Single Thread- é como se tivéssemos um único bloco que vai fazer todo o processamento das nossas requisições, isto é, esse bloco vai receber requisição por requisição e fazer o gerenciamento das requisições, portanto é basicamente o bloco que vai executa alguma função dentro da nossa máquina.

Aqui temos a sacada do Node, é que o Event Loop recebe a requisição, mas não fica responsável por processá-la, ao invés disso, ele vai redirecionar(delegar) essa requisição para uma Thread disponível.

É como se o Node fosse um Single Thread, ao mesmo tempo que é um Multi Thread.

Por padrão o Node tem quatro Threads para utilizar no gerenciamento das requisições.

Por fim, o Node utiliza o conceito do Non blocking IO, isto é, entrada e saída não bloqueante, portanto eu não preciso esperar que uma request seja finalizada para iniciar a próxima request.

--API---------------------------------------------------

Não é algo que conseguimos instalar
Não é um programa configurado
Não é uma dependência configurada dentro de um projeto

API é um conceito que vamos entender a criação de um projeto, sendo que compreendem padrões que podemos ter em um projeto e que define que nosso projeto possa ser entendido como uma API.

Antigamente havia uma única aplicação responsável por fazer tudo, desde a parte visual (front) qaunto o processamento de dados.

Contudo, nesse método não temos um controle melhor de nossa aplicação, pois uma vez que há um único projeto responsável por tudo acabamos encontramos alguns problemas:
- Nosso servidor acaba ficando mais lento
- Precisamos dar mais recursos a nossa aplicação para que o servidor processe
- Muitas pessoas acessando o mesmo servidor.
- Mais desenvolvedores devem trabalhar no mesmo projeto, o que pode acarretar certas falhas.
- Se precisássemos reutilizar alguma parte da aplicação, para criar um mobile, por exemplo, então seria necessário criar uma aplicação nova duplicando aquilo que fizemos.


-> Conceito básico API

Já com API, temos que:
- Nosso Client será o nosso site, que 
- Nosso Server será a nossa API responsável pelos dados

Então basicamente, temos o Client que faz uma requisição à essa API, enquanto que o Server produz uma resposta ao Client.

O que define nosso Server como API?
Temos o nosso servidor com os recursos dentro da nossa API, e esses recursos são as rotas que nosso Client vai solicitar.

--TypeScript---------------------------------------------------

Ferramenta que nos permite tipar os objetos, isto é, definir o tipo do nosso objeto, variável, função, definir retorno... Basicamente criamos uma identidade para aquilo que estamos recebendo.

Por que usá-lo?

Usamos o TypeScript para melhorar, forçando que nossa variáveis sejam de algum tipo, mas como?

Para isso usamos
//nomeDaVariavel : tipoDaVariavel

TypeScript dá uma produtividade maior para a equipe, auxilia que outras pessoa tenha uma clareza dos paramêtros na função, o tipo de retorno, e isso nos impede de cometer erros.

Não esqueça: o TypeScript é usado somente em ambiente de desenvolvimento, se precisarmos usá-lo em produção, deveremos convertê-lo para uma forma que o Node entenda, ou seja, para o JavaScript. 
Então vamos ter um build que vai compilar transformado de TS par JS.

---Importante!----------------------------
Literal Template: conceito com o qual colocamos as variáveis dentro de uma mesma String, onde colocamos a crase que tranforma o nosso texto para que consigamos adicionar variaveis através do ${variavel}
-------------------------------------------


Dependências do projeto:

= Dependências de desenvolvimento -D
= Dependências que fazem parte do projeto (normais)


--Express--Framework que serve para criar as rotas, recursos no NodeJS


//Fazendo um parênteses, sempre que temos três pontinhos ao importar uma biblioteca, significa que dentro dessa biblioteca há tipagem, que não estão dentro da própria biblioteca, pois algumas bibliotecas tem como padrão criar uma biblioteca a parte com todas as tipagens possíveis, então devemos instalar essas bibliotecas para usá-las.
//Bibliotecas de tipos, geralmente ficam com:
//@types/nomeDaBiblioteca





